<style lang="less">
  @import './resources/weui.wxss';
radio .wx-radio-input{
   border-radius: 50%;/* 圆角 */
   width: 40rpx;
   height: 40rpx;
   border-color: #e02e24;
   border-width: 2rpx;
   
}
/* 选中后的 背景样式 （红色背景 无边框 可根据UI需求自己修改） */
radio .wx-radio-input.wx-radio-input-checked{
   border: none;
   background: red;
}
/* 选中后的 对勾样式 （白色对勾 可根据UI需求自己修改） */
radio .wx-radio-input.wx-radio-input-checked::before{
   border-radius: 50%;/* 圆角 */
   width: 40rpx; /* 选中后对勾大小，不要超过背景的尺寸 */
   height: 40rpx; /* 选中后对勾大小，不要超过背景的尺寸 */
   line-height: 40rpx;
   text-align: center;
   font-size:30rpx; /* 对勾大小 30rpx */
   color:#fff; /* 对勾颜色 白色 */
   background: transparent;
   background-color: #e02e24; 
   transform:translate(-50%, -50%) scale(1);
   -webkit-transform:translate(-50%, -50%) scale(1);
}
checkbox .wx-checkbox-input{
   border-radius: 50%;/* 圆角 */
   width: 40rpx; /* 背景的宽 */
   height: 40rpx; /* 背景的高 */
   border-color: #e02e24;
   border-width: 2rpx;
}
/* 选中后的 背景样式 （红色背景 无边框 可根据UI需求自己修改） */
checkbox .wx-checkbox-input.wx-checkbox-input-checked{
   border: none;
   background: red;
}
/* 选中后的 对勾样式 （白色对勾 可根据UI需求自己修改） */
checkbox .wx-checkbox-input.wx-checkbox-input-checked::before{
   border-radius: 50%;/* 圆角 */
   width: 40rpx;/* 选中后对勾大小，不要超过背景的尺寸 */
   height: 40rpx;/* 选中后对勾大小，不要超过背景的尺寸 */
   line-height: 40rpx;
   text-align: center;
   font-size:30rpx; /* 对勾大小 30rpx */
   color:#fff; /* 对勾颜色 白色 */
   background-color: #e02e24; 
   background: transparent;
   transform:translate(-50%, -50%) scale(1);
   -webkit-transform:translate(-50%, -50%) scale(1);
}
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import {
    httpPort,
    httpHead
  } from './const/properties'

  export default class extends wepy.app {
    config = {
      pages: [
        'pages/findMan',
        'pages/findService',
        'pages/myService',
        'pages/followMan',
        'pages/bindPhone',
        'pages/serviceInfo',
        'pages/newPublish',
        'pages/userAgreement',
      ],
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#fe120a',
        navigationBarTitleText: 'WeChat',
        navigationBarTextStyle: 'white'
      },
      tabBar: {
        "color": "#ffffff",
        "selectedColor": "#000000",
        "backgroundColor": "#fe120a",
        "borderStyle": "white",
        "list": [{
            "selectedIconPath": "./resources/icons/searchS.png",
            "iconPath": "./resources/icons/search.png",
            "pagePath": "pages/findService",
            "text": "找人服务我"
          },
          {
            "selectedIconPath": "./resources/icons/teamS.png",
            "iconPath": "./resources/icons/team.png",
            "pagePath": "pages/findMan",
            "text": "找到的人"
          },
          {
            "selectedIconPath": "./resources/icons/heartS.png",
            "iconPath": "./resources/icons/heart.png",
            "pagePath": "pages/followMan",
            "text": "关注的人"
          },
          {
            "selectedIconPath": "./resources/icons/userS.png",
            "iconPath": "./resources/icons/user.png",
            "pagePath": "pages/myService",
            "text": "我提供服务"
          }
        ]
      },
      "permission": {
        "scope.userLocation": {
          "desc": "你的位置信息将用于小程序位置接口的效果展示"
        }
      }
    }
    globalData = {
      location: null,
      gtype: null,
      service: [],
      user: null,
      // {id: "4028815e5dd036b7015dd037e3930000"},
      // 1 未绑定手机号， 2 成功获取UserId
      userState: 1,
      userInfo: null, // wechat info
      followService: [],
      prepay_level: -1,
      followRefresh: false
    }
    constructor() {
      super();
      this.use('requestfix');
      this.use('promisify');
    }
    onLaunch() {
      wepy.showLoading({
        title: '加载中',
        mask: true
      })
      this.userState = 1;
      this.login();
    }
    // 通用方法
    checkUserState(state) {
      if (this.globalData.userState === state)
        return true;
      if (this.globalData.userState === 1) {
        wx.showToast({
          title: '用户未绑定手机号',
          icon: 'none'
        })
      }
      return false;
    }
    
    getRad(d) {
      let PI = Math.PI;
      return d * PI / 180.0;
    }
    getFlatternDistance(lat1, lng1, lat2, lng2) {
      let EARTH_RADIUS = 6378137.0; //单位M
      let f = this.getRad((lat1 + lat2) / 2);
      let g = this.getRad((lat1 - lat2) / 2);
      let l = this.getRad((lng1 - lng2) / 2);
      let sg = Math.sin(g);
      let sl = Math.sin(l);
      let sf = Math.sin(f);
      let s, c, w, r, d, h1, h2;
      let a = EARTH_RADIUS;
      let fl = 1 / 298.257;
      sg = sg * sg;
      sl = sl * sl;
      sf = sf * sf;
      s = sg * (1 - sl) + (1 - sf) * sl;
      c = (1 - sg) * (1 - sl) + sf * sl;
      w = Math.atan(Math.sqrt(s / c));
      r = Math.sqrt(s * c) / w;
      d = 2 * w * a;
      h1 = (3 * r - 1) / 2 / c;
      h2 = (3 * r + 1) / 2 / s;
      let re = (d * (1 + fl * (h1 * sf * (1 - sg) - h2 * (1 - sf) * sg)) / 1000).toFixed(2);
      return isNaN(re) ? 0 : re;
    }
    async follow(item, id) {
      try {
        console.log(this.globalData)
        let res = await wepy.request({
          url: httpHead + httpPort + "/interact/follow",
          method: "POST",
          data: {
            "address": item.address,
            "distance": item.distance,
            "latitude": item.latitude,
            "longitude": item.longitude,
            "serviceId": item.id,
            "userId": this.globalData.user.id,
          }
        })
        console.log(res);
        this.globalData.followRefresh = true;
      } catch (e) {
        console.log(e);
      }
    }
    async followRemove(item) {
      try {
        let res = await wepy.request({
          url: httpHead + httpPort + "/interact/follow/remove",
          method: "POST",
          data: {
            "address": item.address,
            "distance": item.distance,
            "latitude": item.latitude,
            "longitude": item.longitude,
            "serviceId": item.id,
            "userId": this.globalData.user.id,
          }
        })
        this.globalData.followRefresh = true;
        console.log(res);
      } catch (e) {
        console.log(e);
      }
    }
    async login() {
      try {
        let res = await wepy.getUserInfo();
        this.globalData.userInfo = res.userInfo;
      } catch (e) {

      }
      try {
        let res = await wepy.login();
        let code = res.code;
        res = await wepy.request({
          url: httpHead + httpPort + "/user/wechatlogin",
          data: {
            code: code,
          }
        })
        console.log(res);
        if (res.data.status === 200) {
          wx.showToast({
            title: '自动登陆成功',
            icon: 'none'
          })
          this.globalData.user = res.data;
          this.globalData.userState = 2;
          console.log(res.data);
        } else {
          wx.showToast({
            title: '获取用户信息失败，未绑定手机',
            icon: 'none'
          })
        }
      } catch (e) {
        console.log(e);
      }
      wepy.hideLoading();
    }
  }
</script>
